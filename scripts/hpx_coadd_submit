#!/usr/bin/env python2

# Copyright (C) 2014 Science and Technology Facilities Council.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""hpx_coadd_submit: submit hpx legacy coadds to the jsa processing system.

Usage:
    hpx_coadd_submit all [-v | -q] [--dry-run] --task=<task> [options]
    hpx_coadd_submit one [-v | -q] [--dry-run] --tile=<tile> --task=<task> [options]

Options:
    --help, -h                 Show usage information.
    --verbose, -v              Print debugging information.
    --quiet, -q                Omit informational messages.
    --dry-run, -n              Do not actually peform the action.

    --tile=<id>              HEALPix tile to submit job for.
    --task=<task>             jsa_proc task to look for jobs for.
    --priority=<priority>      priority of task.
    --location, -l=<location>  Job location, e.g. JAC, CADC.
    --only-science,            Only coadd 'science' obs.
                               (e.g. no pointings)
    --never-update             Don't change an existing job, even if outdated.
    --exclude-pointing-jobs    If a coadd contains any pointing observations,
                               don't submit it.

Commands:
    all:
        Submit jobs for all tiles in the tile table for the requested task.
        This will check with the OMP to see which observations are currently
        set with a state of BAD or JUNK and not include those. It will check the QA
        status in the JSA_processing system and only include those that are GOOD or
        QUESTIONABLE. All jobs will be created in a task that is named <task>_coadd

    one
        Submit a coadd job for the requested task and requested tile number. It will
        perform the same checks as the 'all' command on the OMP and QA states.
"""

from __future__ import print_function, division, absolute_import

import functools
import logging
import sys

from docopt import docopt

from jsa_proc.config import get_database
from jsa_proc.error import CommandError, JSAProcError
from jsa_proc.state import JSAProcState
from jsa_proc.submit.hpx_submit import submit_one_coadd_job
script_name = 'hpx_coadd_submit'
commands = {}
logger = logging.getLogger(script_name)


def main():
    """Main routine for the hpx_coadd_submit."""

    args = docopt(__doc__)
    print(args)
    # Determine logging level from the --quiet and --verbose options.
    loglevel = logging.INFO

    if args['--verbose']:
        loglevel = logging.DEBUG
    elif args['--quiet']:
        loglevel = logging.WARNING

    try:
        task = args['--task']
    except KeyError:
        raise CommandError('Task must be supplied.')


    logging.basicConfig(level=loglevel)

    try:
        # Process integer arguments.
        for integer_argument in ('--tile','--priority'):
            if args[integer_argument] is not None:
                try:
                    args[integer_argument] = int(args[integer_argument])
                except ValueError:
                    raise CommandError('Option {0} must be an integer'.
                                       format(integer_argument))

        # Determine which sub-command to perform.
        for (command, func) in commands.items():
            if args.get(command):
                logger.debug('Running %s subcommand', command)
                func(args)
                break
        else:
            raise CommandError('Failed to find sub-command to run')

    except CommandError as e:
        # If a known error happened, display its message and exit with
        # bad status.
        print('{0}: {1}'.format(script_name, e.message), file=sys.stderr)
        sys.exit(1)

    else:
        # Otherwise exit with good status.
        sys.exit(0)


def command(f):
    """Decorator which adds a function to the commands dictionary."""

    commands[f.__name__[:-1] if f.__name__.endswith('_') else f.__name__] = f
    return f


@command
def all(args):

    """
    Sub-command to submit all tile coadd jobs for a given task.
    """
    location = args.get('--location', 'JAC')
    parenttask = args['--task']
    science_obs_only = args.get('--only-science', False)
    never_update = args.get('--never-update', False)
    exclude_pointing_jobs = args.get('--exclude-pointing-jobs', False)
    dryrun = args.get('--dry-run', True)
    priority = args.get('--priority', 0)
    #Values that are unchanging.
    mode='public'
    parameters='COADD_JSA_TILES'
    location = 'JAC'

    # Get full list of tiles.
    db = get_database()
    tiles = db.get_tilelist(task=parenttask)
    tiles = list(tiles)
    tiles.sort()

    logger.info('%i tiles found for task %s' % (len(tiles), parenttask))
    total = len(tiles)
    count = 0
    for t in tiles:
        logger.info('Processing tile %i (%i of %i)' % (t, count, total))
        try:
            submit_one_coadd_job(t, parenttask, mode, parameters, location,
                                 exclude_pointing_jobs=exclude_pointing_jobs,
                                 science_obs_only=science_obs_only,
                                 never_update=never_update, dryrun=dryrun, priority=priority)
        except JSAProcError:
            pass

        count += 1

@command
def one(args):

    """
    Sub-command to submit a single tile coadd job for a given task.
    """
    parenttask = args['--task']
    location = args.get('--location', 'JAC')
    science_obs_only = args.get('--only-science', False)
    never_update = args.get('--never-update', False)
    exclude_pointing_jobs = args.get('--exclude-pointing-jobs', False)
    dryrun = args.get('--dry-run', True)
    tile = args.get('--tile')
    priority = args.get('--priority', 0)

    #Values that are unchanging.
    mode = 'public'
    parameters = 'COADD_JSA_TILES'
    location = 'JAC'

    job_id = submit_one_coadd_job(tile, parenttask, mode, parameters, location,
                                  exclude_pointing_jobs=exclude_pointing_jobs,
                                  science_obs_only=science_obs_only,
                                  never_update=never_update, dryrun=dryrun, priority=priority)



if __name__ == '__main__':
    main()


