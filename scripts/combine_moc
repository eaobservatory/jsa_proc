#!/usr/bin/env python2

# Copyright (C) 2014 Science and Technology Facilities Council.
# Copyright (C) 2015 East Asian Observatory.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""combine_moc: Generate combined MOC files from job output MOCs.

Usage:
    combine_moc --task=<task> [--out-base <base-file-name> | --list] [--tile | --extent] [--order=<order>] [--title=<title>]

Options:
    --task <task-name>           Task name
    --out-base <base-file-name>  Stem for output file names
    --order <order>              Order at which to normalize MOC files.
    --title <title>              Title for MOC name FITS header [default: Combined].
    --list                       List MOC files instead of combining.
    --tile                       Only process "tile" MOCs.  (Currently only applies in non-list mode.)
    --extent                     Only process "extent" MOCs.  (Currently only applies in non-list mode.)
"""

from __future__ import absolute_import, division, print_function

import os.path

from docopt import docopt
from pymoc import MOC

from jsa_proc.admin.directories import get_output_dir
from jsa_proc.config import get_database
from jsa_proc.state import JSAProcState


def main():
    db = get_database()

    args = docopt(__doc__)

    process_tile = (args['--tile'] or not args['--extent'])
    process_extent = (args['--extent'] or not args['--tile'])

    if process_tile:
        tile = MOC(name='{} tile coverage'.format(args['--title']),
                   moctype='IMAGE')
    if process_extent:
        extent = MOC(name='{} detected extent'.format(args['--title']),
                     moctype='IMAGE')

    if args['--list']:
        out_base = None
    else:
        out_base = args['--out-base']
        if not out_base:
            raise Exception('Output base file name must be specified')

    order = args['--order']
    if order is not None:
        order = int(order)

    task = args['--task']
    states = JSAProcState.STATE_POST_RUN  # .union(set((JSAProcState.ERROR,)))

    jobs = db.find_jobs(task=task, state=states, outputs='%-moc%.fits')

    n = 0.0
    n_jobs = float(len(jobs))

    for job in jobs:
        if out_base is not None:
            print('{:.1f}%'.format(100.0 * n / n_jobs), job.id, repr(job.outputs))
            n += 1.0

        # "find_jobs" doesn't normally return "state_prev" but we would need
        # to add it to distinguish jobs in the error state due to ingestion.
        # if ((job.state == JSAProcState.ERROR) and
        #         (job.state_prev != JSAProcState.INGESTING)):
        #     continue

        for file in job.outputs:
            pathname = os.path.join(get_output_dir(job.id), file)

            if out_base is None:
                print(pathname)

            else:
                moc = MOC(filetype='fits', filename=pathname)

                if order is not None:
                    moc.normalize(order)

                if '_tile-moc' in file:
                    if process_tile:
                        tile += moc

                elif '_extent-moc' in file:
                    if process_extent:
                        extent += moc

                else:
                    raise Exception('Did not recognise file name: ' + file)

    if out_base is not None:
        if process_tile:
            tile.write('{}_tile.fits'.format(out_base), filetype='fits')
        if process_extent:
            extent.write('{}_extent.fits'.format(out_base), filetype='fits')


if __name__ == '__main__':
    main()
