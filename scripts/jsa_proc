#!/usr/bin/env python2

# Copyright (C) 2014 Science and Technology Facilities Council.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""jsa_proc - JSA processing tracking system tool

Usage:
    jsa_proc clean [-v | -q] [--dry-run] (input | scratch) [--count <number>]
    jsa_proc etransfer [-v | -q] [--dry-run] --job-id <id>
    jsa_proc etransfer [-v | -q] [--dry-run] --poll
    jsa_proc fetch [-v | -q] [--job-id <id>] [--force] [--replaceparent] [--task <task>]
    jsa_proc import [-v | -q] [--dry-run] --location <location> --task <task> [--tag <tag>]
    jsa_proc import [-v | -q] [--dry-run] --location <location> --task <task> [--foreign-id <foreign-id>]
    jsa_proc ingest [-v | -q] [--dry-run] [--force] --job-id <id>
    jsa_proc ingest [-v | -q] [--dry-run] --task <task>
    jsa_proc poll [-v | -q] [--no-etransfer]
    jsa_proc query [-v | -q] (jcmtinfo | caom2 | ompstatus) <search>
    jsa_proc revalidate [-v | -q] [--dry-run] (output) --job-id <id>
    jsa_proc revalidate [-v | -q] [--dry-run] (output) [--task <task>] [--location <location>]
    jsa_proc run [-v | -q] [--job-id <id>] [--force] [--task <task>]
    jsa_proc unauthorized [-v | -q] [--check-at-cadc]

Options:
    --help, -h                 Show usage information.
    --verbose, -v              Print debugging information.
    --quiet, -q                Omit informational messages.
    --dry-run, -n              Do not actually peform the action.

    --job-id, -j <id>          Identifier of job on which to work.
    --location, -l <location>  Job location, e.g. JAC, CADC.
    --foreign-id <foreign-id>  Foreign ID (e.g. CADC recipe instance).

    --count, -c <number>       Number of jobs to process.
    --check-at-cadc            Test whether files are at CADC.
    --force, -f                Skip initial state check.
    --replaceparent            Force recopying parent jobs into input folder
    --no-etransfer             Skip e-transfer steps.
    --poll                     Poll a system for state updates.
    --tag <tag>                Select jobs by tag.
    --task, -t <task>          Select jobs for a particular task.

Commands:
    fetch:
        Looks at a job in the queued state, assembles the data for it,
        and then advances the job to the waiting state.

        If the --job-id command line argument is not used, this will run on
        the highest priority job labelled to be reduced at the JAC and in the
        missing state.

    poll:
        This command will carry out simple state changes for JAC jobs in the
        database configured in the JSAProc configuration file.

    run:
        Run a job locally and mark the state appropriately. If the
        option --job-id is not given, it will run the highest priority job
        marked to be performed at the JAC and already in the waiting state.
"""

from __future__ import print_function, division, absolute_import

import functools
import logging
import sys

from docopt import docopt

from jsa_proc.config import get_database
from jsa_proc.error import CommandError
from jsa_proc.state import JSAProcState

script_name = 'jsa_proc'
commands = {}
logger = logging.getLogger(script_name)


def main():
    """Main routine for the jsa_proc tool."""

    args = docopt(__doc__)

    # Determine logging level from the --quiet and --verbose options.
    loglevel = logging.INFO

    if args['--verbose']:
        loglevel = logging.DEBUG
    elif args['--quiet']:
        loglevel = logging.WARNING

    logging.basicConfig(level=loglevel)

    try:
        # Process integer arguments.
        for integer_argument in ('--job-id', '--count', '--foreign-id'):
            if args[integer_argument] is not None:
                try:
                    args[integer_argument] = int(args[integer_argument])
                except ValueError:
                    raise CommandError('Option {0} must be an integer'.
                                       format(integer_argument))

        # Determine which sub-command to perform.
        for (command, func) in commands.items():
            if args.get(command):
                logger.debug('Running %s subcommand', command)
                func(args)
                break
        else:
            raise CommandError('Failed to find sub-command to run')

    except CommandError as e:
        # If a known error happened, display its message and exit with
        # bad status.
        print('{0}: {1}'.format(script_name, e.message), file=sys.stderr)
        sys.exit(1)

    else:
        # Otherwise exit with good status.
        sys.exit(0)


def command(f):
    """Decorator which adds a function to the commands dictionary."""

    commands[f.__name__[:-1] if f.__name__.endswith('_') else f.__name__] = f
    return f


@command
def clean(args):
    """Sub-command to clean up old directories."""

    if args['input']:
        from jsa_proc.action.clean import clean_input
        clean_input(count=args['--count'], dry_run=args['--dry-run'])

    elif args['scratch']:
        from jsa_proc.action.clean import clean_scratch
        clean_scratch(count=args['--count'], dry_run=args['--dry-run'])

    else:
        raise CommandError('Did not recognise clean type')


@command
def etransfer(args):
    """Sub-command to copy files into the e-transfer system,
    or to poll the e-transfer system for status updates.
    """

    from jsa_proc.cadc.etransfer import etransfer_poll_output, \
        etransfer_send_output

    if args['--poll']:
        etransfer_poll_output(dry_run=args['--dry-run'])

    else:
        etransfer_send_output(args['--job-id'], dry_run=args['--dry-run'])


@command
def fetch_(args):
    """Sub-command to fetch data for a job."""

    from jsa_proc.action.fetch import fetch

    fetch(job_id=args['--job-id'], force=args['--force'], replaceparent=args['--replaceparent'], task=args['--task'])


@command
def import_(args):
    """Sub-command to do an initial import of jobs from another location."""

    if args['--location'] == 'CADC':
        from jsa_proc.cadc.initial_import import import_from_cadcdp

        if not import_from_cadcdp(dry_run=args['--dry-run'],
                                  task=args['--task'],
                                  tag_pattern=args['--tag'],
                                  recipe_instance=args['--foreign-id']):
            raise CommandError('errors encountered during import')

    else:
        raise CommandError('unknown location: {0}'.format(args['--location']))


@command
def ingest(args):
    """Sub-command to ingest a job's output into CAOM-2."""

    from jsa_proc.cadc.ingest import ingest_output

    ingest_output(args['--job-id'],
                  location='JAC',
                  task=args['--task'],
                  dry_run=args['--dry-run'],
                  force=args['--force'])


@command
def poll(args):
    """Sub-command to run the state machine."""

    from jsa_proc.admin.statemachine import JSAProcStateMachine

    # Get the database specified in the config file.
    db = get_database()

    # Get the state machine.
    sm = JSAProcStateMachine(db, None)

    # Poll the JAC jobs.
    status = sm.poll_jac_jobs(etransfer=(not args['--no-etransfer']))

    # Return a status of 1 if status is not True.
    if not status:
        raise CommandError('Errors were encountered during state poll')


@command
def query(args):
    """Sub-command to test the various query methods.
    """

    search = args['<search>']

    if args['caom2']:
        from jsa_proc.cadc.tap import CADCTap
        caom2 = CADCTap()
        for obsid in sorted(caom2.obsids_by_pattern(search.lower())):
            print(obsid)

    elif args['jcmtinfo']:
        from jsa_proc.cadc.files import CADCFiles
        ad = CADCFiles()
        for file in sorted(ad.files_by_pattern(search)):
            print(file)

    elif args['ompstatus']:
        from jsa_proc.omp.db import OMPDB
        ompdb = OMPDB()
        print('Status: ' + repr(ompdb.get_status(search)))

    else:
        raise CommandError('Did not recognise query type')


@command
def revalidate(args):
    """Sub-command to re-validate jobs."""

    if args['output']:
        from jsa_proc.action.validate import validate_output

        db = get_database()

        if args['--job-id'] is not None:
            validate_output(args['--job-id'], db, dry_run=args['--dry-run'])

        else:
            for job in db.find_jobs(task=args['--task'],
                                    location=args['--location'],
                                    state=JSAProcState.STATE_POST_RUN):
                validate_output(job.id, db, dry_run=args['--dry-run'])

    else:
        raise CommandError('Did not recognise re-validation type')


@command
def run(args):
    """Sub-command to run a job."""

    from jsa_proc.action.run import run_job

    run_job(job_id=args['--job-id'], force=args['--force'], task=args['--task'])


@command
def unauthorized(args):
    """Sub-command to investigate jobs which failed to fetch due to
    "unauthorized" errors.
    """

    from jsa_proc.action.unauthorized import investigate_unauthorized_errors

    investigate_unauthorized_errors(
        location='JAC',
        check_at_cadc=args['--check-at-cadc'])


if __name__ == '__main__':
    main()
