#!/usr/bin/env python2

# Copyright (C) 2014 Science and Technology Facilities Council.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""jsa_proc - JSA processing tracking system tool

Usage:
    jsa_proc etransfer [-v | -q] [--dry-run] --job_id <id>
    jsa_proc query [-v | -q] (jcmtinfo | caom2 | ompstatus) <search>
    jsa_proc unauthorized [-v | -q] [--check-at-cadc]

Options:
    --help, -h              Show usage information.
    --verbose, -v           Print debugging information.
    --quiet, -q             Omit informational messages.
    --dry-run, -n           Do not actually peform the action.

    --job_id <id>, -j <id>  Identifier of job on which to work.

    --check-at-cadc         Test whether files are at CADC.

"""

from __future__ import print_function, division, absolute_import

import functools
import logging
import sys

from jsa_proc.cadc.etransfer import etransfer_send_output
from jsa_proc.cadc.files import CADCFiles
from jsa_proc.cadc.tap import CADCTap
from jsa_proc.error import CommandError
from jsa_proc.job_run.unauthorized import investigate_unauthorized_errors
from jsa_proc.omp.db import OMPDB

script_name = 'jsa_proc'
commands = {}
logger = logging.getLogger(script_name)


def main():
    """Main routine for the jsa_proc tool."""

    from docopt import docopt
    args = docopt(__doc__)

    # Determine logging level from the --quiet and --verbose options.
    loglevel = logging.INFO

    if args['--verbose']:
        loglevel = logging.DEBUG
    elif args['--quiet']:
        loglevel = logging.WARNING

    logging.basicConfig(level=loglevel)

    # Determine which sub-command to perform.
    try:
        for (command, func) in commands.items():
            if args.get(command):
                logger.debug('Running %s subcommand', command)
                func(args)
                break
        else:
            raise CommandError('Failed to find sub-command to run')

    except CommandError as e:
        # If a known error happened, display its message and exit with
        # bad status.
        print('{0}: {1}'.format(script_name, e.message), file=sys.stderr)
        sys.exit(1)

    else:
        # Otherwise exit with good status.
        sys.exit(0)


def command(f):
    """Decorator which adds a function to the commands dictionary."""

    commands[f.__name__] = f
    return f


@command
def etransfer(args):
    """Sub-command to copy files into the e-transfer system.
    """

    try:
        job_id = int(args['--job_id'])
    except ValueError:
        raise CommandError('Job ID must be an integer')

    etransfer_send_output(job_id, dry_run=args['--dry-run'])


@command
def query(args):
    """Sub-command to test the various query methods.
    """

    search = args['<search>']

    if args['caom2']:
        caom2 = CADCTap()
        for obsid in sorted(caom2.obsids_by_pattern(search.lower())):
            print(obsid)

    elif args['jcmtinfo']:
        ad = CADCFiles()
        for file in sorted(ad.files_by_pattern(search)):
            print(file)

    elif args['ompstatus']:
        ompdb = OMPDB()
        print('Status: ' + repr(ompdb.get_status(search)))

    else:
        raise CommandError('Did not recognise query type')

@command
def unauthorized(args):
    """Sub-command to investigate jobs which failed to fetch due to
    "unauthorized" errors.
    """

    investigate_unauthorized_errors(
        location='JAC',
        check_at_cadc=args['--check-at-cadc'])


if __name__ == '__main__':
    main()
